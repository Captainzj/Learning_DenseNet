# -*- coding:utf-8 -*-
# [pytorch方法测试——卷积（三维）](https://blog.csdn.net/tmk_01/article/details/80672018)

import torch
import torch.nn as nn
import torch.autograd as autograd

m = nn.Conv3d(2, 1, kernel_size=3, stride=2)
input = autograd.Variable(torch.randn(1, 2, 3, 5, 6))  # 五维数组
output = m(input)

print("输入图片：")
print(input)   # size: (1, 2, 3, 5, 6))
print("卷积的权重：")
print(m.weight)  # size: (1, 2, 3, 3, 3)
print("卷积的偏重：")
print(m.bias)  # size: (1, 1)

print("二维卷积后的输出：")
print(output)   # size: (1, 1, 1, 2, 2)  o = ( i - kernel_size + 2*Padding)/stride +1
print("输出的尺度：")
print(output.size())

convBlockOne = 0
convBlockOneStride = 0
for i in range(3):
    for j in range(3):
        for k in range(3):
            # 第一个卷积核与图片对应相乘
            convBlockOne += m.weight[0][0][i][j][k] * input[0][0][i][j][k] \
                            + m.weight[0][1][i][j][k] * input[0][1][i][j][k]\
            # 第一个卷积核与图片对应相乘(向下stride 2)
            convBlockOneStride += m.weight[0][0][i][j][k] * input[0][0][i][j+2][k] \
                            + m.weight[0][1][i][j][k] * input[0][1][i][j+2][k]
convBlockOne += m.bias[0]
convBlockOneStride += m.bias[0]
print("第一个卷积核的输出：")
print(convBlockOne)
print("第一个卷积核与图片对应相乘(向下stride 2)的输出：")
print(convBlockOneStride)

'''
输入图片：
tensor([[[[[ 7.9832e-01,  1.4244e+00, -5.2055e-01, -6.1551e-01, -2.9723e-01,
            -1.6268e+00],
           [ 6.6013e-01, -1.1887e-01,  8.3890e-01,  1.5075e-01,  7.9183e-01,
             5.2994e-02],
           [-2.7737e-01,  9.9666e-01,  1.3417e+00, -1.3390e+00,  3.8180e-01,
            -7.8638e-01],
           [ 3.6057e-01, -5.4136e-02,  6.8332e-01,  2.6888e-01, -1.7081e+00,
             9.5216e-01],
           [-9.8736e-01, -7.9166e-01, -8.5339e-01, -8.7612e-01, -2.9784e-01,
            -2.5883e-01]],

          [[ 2.4116e-01, -4.0455e-01, -4.9428e-01, -2.8460e-01, -8.9070e-01,
            -9.8473e-02],
           [-1.0846e+00,  1.4839e+00,  9.3848e-04,  6.2182e-01, -4.0307e-01,
            -6.8219e-01],
           [-8.5530e-02,  2.6495e-01,  3.2937e-01, -6.1984e-01, -5.6248e-01,
            -3.5092e-01],
           [-1.9737e-01, -1.2027e+00,  6.2383e-01, -8.7758e-01, -2.6580e+00,
             6.9413e-01],
           [ 2.3401e+00,  5.4746e-01,  1.5712e-01, -7.0792e-01,  6.2042e-01,
            -1.2472e+00]],

          [[ 9.2037e-01,  7.9223e-01, -1.0659e+00, -8.4335e-01, -9.8293e-01,
             9.0391e-01],
           [ 4.4638e-01, -1.4370e+00, -9.2754e-01, -6.5441e-01,  8.4154e-01,
            -8.8062e-01],
           [-4.4729e-01, -1.3440e+00,  3.1300e-02, -7.6739e-01, -1.0590e+00,
             1.2644e+00],
           [ 2.3114e-01,  9.5158e-01,  2.8462e-01, -5.3171e-01, -9.5236e-02,
             2.8721e-01],
           [ 1.7944e+00,  1.3934e+00, -8.9614e-01,  3.5746e-02,  1.3948e+00,
            -1.8769e-03]]],


         [[[ 9.0560e-01, -1.9313e-01, -1.6027e+00,  1.9832e-01,  9.1147e-01,
             1.1315e+00],
           [ 5.6675e-01,  2.9111e-02,  1.5885e-01,  1.6065e+00,  2.5288e-01,
             8.9675e-01],
           [ 2.1484e+00, -1.3037e+00,  2.1049e+00, -2.3089e-02,  9.1834e-01,
            -2.3501e+00],
           [-1.6066e-01,  1.5988e+00,  1.2542e+00,  6.9502e-01, -3.6276e-01,
             1.0139e+00],
           [ 3.2834e-03, -7.3462e-01, -9.5861e-01,  1.1117e+00, -3.6250e-02,
            -1.1642e-01]],

          [[-1.3865e+00, -2.4201e-01, -1.1702e+00,  3.8209e-01,  1.0682e+00,
            -6.4113e-01],
           [-9.0533e-02,  5.3859e-01, -5.2354e-01,  2.1619e-01,  2.3973e-01,
            -3.5862e-01],
           [ 7.0235e-01,  8.7249e-01, -4.3608e-01, -1.4974e+00,  1.0287e+00,
            -1.1549e+00],
           [-1.8615e+00, -3.0568e+00,  1.0619e+00,  2.7502e-01,  1.1664e+00,
            -1.5577e-01],
           [-9.6116e-01, -1.0375e+00,  2.7738e-01, -1.1536e-01, -6.2927e-01,
            -1.0601e+00]],

          [[ 9.0466e-01,  9.4897e-01,  4.4921e-01, -1.4947e+00, -1.0498e+00,
             8.5653e-01],
           [ 4.3893e-02,  6.2194e-01,  9.7742e-02, -1.3933e+00, -3.9853e-01,
            -6.6358e-01],
           [-1.5725e-01,  1.0591e+00,  2.1671e-01,  1.7194e+00,  4.9073e-01,
             2.9489e-01],
           [-3.4546e-01,  1.4008e-01,  2.4926e+00,  9.7616e-02,  1.5071e-01,
             5.6234e-01],
           [-4.2198e-01, -1.0255e+00,  9.9499e-01, -2.6941e-02,  5.9589e-01,
            -1.4112e+00]]]]])
卷积的权重：
Parameter containing:
tensor([[[[[-0.0460, -0.1358,  0.0672],
           [ 0.0475, -0.0242,  0.0569],
           [-0.1223, -0.0219,  0.0412]],

          [[ 0.0687,  0.0238, -0.0298],
           [-0.1336, -0.0340,  0.1195],
           [-0.0390, -0.0592, -0.0764]],

          [[ 0.0627, -0.0403, -0.0721],
           [-0.0347,  0.0647,  0.0299],
           [ 0.0997, -0.0168,  0.1124]]],


         [[[-0.0065,  0.0827,  0.1030],
           [ 0.1138, -0.0700, -0.0908],
           [-0.0433,  0.0265,  0.0303]],

          [[-0.0897, -0.1310, -0.1326],
           [ 0.0990, -0.1328,  0.0631],
           [ 0.0533,  0.1134,  0.0082]],

          [[-0.1229,  0.0722, -0.0202],
           [ 0.0751, -0.0601,  0.0463],
           [-0.0351,  0.0628, -0.0807]]]]], requires_grad=True)
卷积的偏重：
Parameter containing:
tensor([-0.1238], requires_grad=True)
二维卷积后的输出：
tensor([[[[[-0.1118, -0.5468],
           [-0.0108,  0.5377]]]]], grad_fn=<ThnnConv3DBackward>)
输出的尺度：
(1, 1, 1, 2, 2)
第一个卷积核的输出：
tensor(-0.1118, grad_fn=<AddBackward0>)
第一个卷积核与图片对应相乘(向下stride 2)的输出：
tensor(-0.0108, grad_fn=<AddBackward0>)
'''


'''
   和二维卷积一样，大家只要记住卷积核（此例为一个卷积核，维度为2*3*3*3）
[[[[[ 0.0134,  0.1058, -0.0204],
           [-0.1219,  0.0881, -0.0455],
           [-0.0813,  0.0803,  0.0774]],


          [[-0.0703, -0.0120, -0.0227],
           [-0.0820,  0.0459, -0.0942],
           [ 0.0043, -0.0486, -0.1331]],


          [[-0.1315, -0.0889,  0.1048],
           [-0.1034,  0.0881,  0.0259],
           [-0.0182,  0.0609,  0.0272]]],




         [[[-0.1038,  0.0391,  0.0325],
           [-0.0242,  0.1138,  0.0522],
           [ 0.0649,  0.0600, -0.0476]],


          [[ 0.1099, -0.0557,  0.0714],
           [-0.0997, -0.0301, -0.0354],
           [-0.1291, -0.0227,  0.0915]],


          [[-0.0529, -0.0907,  0.0566],
           [-0.0386, -0.0340, -0.0872],
           [-0.0612, -0.0455, -0.0208]]]]]
并且用它里的维度和输入图片的维度对应相乘最后加上偏重就可以了。
'''